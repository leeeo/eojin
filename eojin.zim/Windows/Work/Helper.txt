Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-04-16T12:01:56+09:00

====== Helper ======

== 레주메의 진실과 네트워킹 ==

그냥 간단히 쓰겠습니다. 해외 취업하시는 분들 중, 이쁘장한 레주메 넣어서 여러 회사에 온라인으로 잔뜩 지원했는데 답 메일이 한 통도 안 오는 분들. 내가 뭐 잘못하고 있나 생각이 드시죠?

뭐 잘못하고 있습니다. 분명 레주메랑 지원 방식에 문제가 있어요.

요즘은 소프트웨어 엔지니어링이 인기 직업이라 한 회사에 지원하는 사람 수가 굉장히 많습니다. 대기업으로 넘어가면 천 단위 만 단위 넘죠. 흔히 면접관이 레주메 30초만 들여다본다는 말 들어보셨습니다. 과연 진실일까요? 이것도 반쪽짜리 진실입니다. 레주메의 90% 이상은 누구 하나 들여다보지 않고 버려집니다. 요즘 시대 유행어 "Ain't nobody got time for that"처럼, 수만 장이나 되는 레주메를 30초라도 들여다볼 시간 있는 recruiter는 없습니다.

그럼 대체 어떤 기준으로 인터뷰 대상이 선정되는 걸까요? 레주메를 온라인으로 제출한다는 점에 주의해야 합니다. 워드나 pdf 파일로 제출한 레주메는 HR 프로그램이 parse해 단어 단위로 나눕니다. 거기서 각 단어의 빈도를 계산해 이러이러한 기술 단어가 없으면 즉시 탈락, 아니면 기계학습 classification을 통해 이런 지원자가 좋은 지원자일 가능성이 높다고 판단되는 사람만 패스하고, 그제서야 recruiter가 직접 레주메를 읽습니다.

요약하자면, 회사에서 필요로 하는 기술이나 최신 유행어(buzzword. 예를 들어 Agile등)가 레주메에 없으면 아무리 좋은 실력을 가져도 기회조차 얻지 못한다는 겁니다.

그걸 깨는 방법은 간단한데, 이것도 문제가 있습니다. 사람이 읽을 거 신경 안 쓰고 레주메를 buzzword로 꽉꽉 채우면 아주 간단하게 자동 레주메 스크리닝을 패스하는데... 실제 recruiter가 읽으면 "레주메 스크리닝만 넘기려고 별 내용도 실속도 없이 레주메를 조작했다"는 걸 척 알아보고 그냥 쓰레기통에 버린다는게 문제입니다.

진정한 해결책은 네트워킹 뿐입니다.

제일 좋은 방법은 이미 해당 회사에 일하고 있는 학교 선배나 아는 사람 추천을 통하면 스크리닝을 건너뛰고 바로 recruiter 손에 레주메를 넘기는 게 가능합니다. 보통 이런 경우엔 추천된 사람이 취업하면 추천자가 성과 보너스를 받는 경우가 대부분이라 win-win입니다. 다만 그만큼 실력이 있어야 추천받았다 취업 안 되는 쪽팔린 경우가 없겠죠?

차선책은 LinkedIn 같은 데서 회사를 잘 조사해서, Head of Recruiting/Human Resource/Talent같은 직함을 가진 사람에게 직접 이메일로 레주메와 왜 이 회사에 오고싶은지 진솔한 cover letter를 쓰는 방법입니다. 가끔 이메일 주소 구하기 힘든 경우가 있는데 뒷조사를 잘 해봐야 합니다.

제가 최종으로 받은 1억 offer 두 개도 각각 위 방식으로 얻었습니다. 한 회사는 지원했던 다른 회사 엔지니어의 한 다리 건너 추천으로 인터뷰를 얻었고, 또 한 회사는 회사 HR 담당자에게 이메일로 직접 커버 레터와 레주메를 보내서 인터뷰를 얻었습니다.

가고 싶은 회사가 있으면 미리미리 해당 회사에 학교 선배가 있는지, 인사담당자가 누구인지 조사해두세요.

--------------
원래 레주메 얘기를 하려고 했지만 이쪽 얘기를 꼭 해야 할 것 같아서 먼저 쓰겠습니다.

+면접 문제 제대로 푸는 법: code golf와 cargo cult를 넘어서

예전부터 생활코딩 눈팅하다 보면 꼭 "모 대기업 면접 출제 문제" 류의 글이 종종 올라옵니다. 그런데 이런 소리 하면 절 미워하는 분이 생길지도 모르겠지만, 제 말에 귀를 기울이는 분들께는 약이 되는 소리가 되리라 믿고 말씀드리겠습니다.

주로 올라오는 패턴은 (원래 글)"XX도 해보고 YY도 해봤는데 안 돼요" -> (댓글 패턴 1) "ZZ도 해보면 될 거 같고... WW도 해봐도 될 거 같네요", (댓글 패턴 2) "모 언어에선 한줄 코딩 땡!"으로 보입니다. 이런 글 읽을 때마다 "이건 좀 많이 아닌데..."라는 생각이 드는 제가 오지랖 넓은 걸까요?

기업 면접시 주어지는 문제는 사실 풀라고 주는 게 아니라 면접자의 사고방식을 알아보기 위해 내는 문제입니다. 그래서 대부분의 면접 시간은 사실 코드를 쓰는 게 아니라 (실제 코드는 5분 미만) 문제 접근 방식을 설명하는 데 쓰입니다. 그럼 저 두 가지 접근 방식이 뭐가 문제인지 차근차근 짚어보겠습니다.

첫째로, X도 해보고 Y도 해보고 Z도 해보고... 아예 문제 이해를 못 한 케이스입니다. 이건 면접에만 문제되는 게 아니라 실무에도 문제되는 무서운 사고방식입니다. 뭔진 모르겠고 일단 코드 쓰다보면 돌아가겠지...하는.

언제 어떤 문제를 보던, 우선 1)input, 2)output, 3)constraint를 생각해봐야 합니다. 1) 어떤 종류와 사이즈의 입력이 들어오는지, 2) 알고리즘이 돌아가는 동안 저장했다 출력해야 하는 정보는 뭔지, 3) 해서는 안 될 행동이 있는지 (예를 들어 millions of data에 O(n^2) time이나 billions of data에 O(n) space 등...). 그러고나서 순서도를 짜서 pseudocode를 써야 합니다. 여러가지 알고리즘이나 자료구조를 이용한 해답이 가능한 경우, 각각을 모두 설명하고 각각 pseudocode를 써야 합니다.

여기서 문제는 pseudocode가 아니라 무작정 실제 언어로 쓰기 시작하는 분들이 많을 거라 예상되는데, 굉장히 안 좋은 버릇입니다. 위에서 언급한 두 번째 댓글 접근방식이 이에 해당합니다. 언어의 고급 기능을 알고 쓰는 건데 뭐가 문제일까요?

여기서 문제는, 면접관이 원하는 인재는 언어 API 많이 외운 코더가 아니라 기본 알고리즘과 자료구조를 잘 이해하는 엔지니어라는 점입니다. 루비 one-liner는 평소에 빨리 뭐 끝내야 할 때 유용하지만, 면접 가서 루비 one-liner 해답을 쓰면 즉시 분위기 싸해집니다. 운 나쁘면 면접 거기서 끝나고, 운 좋아봐야 "이제 거기에 쓰인 모든 루비 자료구조와 알고리즘의 internal implementation을 설명해보세요"라는 대답이 돌아올 겁니다. 거기서 대답 못하면 끝입니다.

대답 하실 수 있나요? 없으면 언어 구현 상세내역을 찾아 배우고, 왜 그게 작동하는지 알고리즘을 배우는게 현란한 API 다루기를 배우는 것보다 우선순위입니다. 그게 안 되면 그냥 cargo cult만 배운 코더 수준을 벗어날 수 없습니다.

태평양 섬 중에 비행기를 타고온 백인들을 조상신으로 받드는 종교를 믿는 사람들이 살고 있는 섬이 있습니다. 백인들이 몇 번 비행기 타고와서 물건을 나눠주는 것을 보고 조상들이 찾아와 선물을 주는 것으로 생각해서, 수십년째 매년 조잡한 풀밭 활주로와 나무 관제탑을 만들어서 제사를 지내다보면 언젠가 다시 조상들이 찾아오겠지...하는 생각을 하는 사람들입니다. 쓰는 언어가 어떻게 구현되었는지 모르는 코더는 이와 같습니다. "이렇게 하다보니 되더라"는 굉장히 위험합니다.

다른 예를 하나 더 들겠습니다. 프로그래머 블로거 조엘 스폴스키가 흔히 드는 예로 Shlemiel the Painter가 있습니다. 대충 요약하자면 페인트공 Shlemiel이 매일 칠하는 페인트 양이 줄어들기에 누가 물어봤더니 "아, 페인트 통에 붓을 찍어서 흘리지 않고 멀리까지 걸어가는게 힘들더라구"라 했다는 얘기입니다. 스폴스키 말대로 문자열을 예제로 들자면, 파이썬에서 문자열 수백개를 + 연산자를 사용해서 concatenate하면 어떻게 될 까요? 파이썬 문자열은 immutable이라, 플러스를 할때마다 새 문자열을 만듭니다. A+B+C+D의 경우, A와 B를 복사해서 AB를 만들고, 다시 AB와 C를 복사해서 ABC를 만들고... 이걸 O(n) concatenation이라 설명하면 그 면접은 그냥 끝입니다.

원래 얘기로 돌아와서, 대답 하실 수 있으면 애초에 one-liner를 안 쓰는 게 낫습니다. 차근차근 순서를 설명하라고 문제를 내줬는데 "난 이런거 한줄로 쓴다~"해놓고 물어봐야 순서를 대답하는 면접자를 면접관은 어떻게 볼까요?

해외에서는 code golf가 상당히 인기입니다. 말 그대로 골프처럼 같은 기능을 최대한 짧은 코드를 쓸 수록 더 값어치있게 쳐주는 게임인데, 원래 펄 해커 사이에서 유행하던 놀이입니다. 그렇지만 코드 짧게 쓰는 건 code golf에서나 인정받지, 면접에서는 굉장히 안 좋은 선택입니다. 요 며칠 전에 어떤 면접관 분께서도 말씀하셨지만, 이해하기 쉬운 코드를 풀어서 쓰도록 연습해보세요. 그리고 코드를 쓰기 전에는 반드시 모든 계획을 짜서, 옆에 면접관이 있다고 상상하고 입으로 소리내어 모든 사항을 설명한 후 코딩에 들어가도록 버릇을 만들어보세요.

저도 2년 전엔 제가 컴공을 시작할지도 모르고 있었습니다. 코딩이 뭔지는 반 년이 지나서야 감을 좀 잡았고, 코딩 퀄리티는 1년차에 접어들어서야 좀 알 것 같았고, 본격적인 인터뷰 준비는 지난 10월달에 시작한 게 전부입니다. 바른 공부방법만 알면 여러분도 할 수 있습니다. 희망을 가지세요.

---------------------

면접관으로써의 경험을 공유해주신 분들의 말씀에 힘입어, 글 몇 개 더 간간히 올리겠습니다.

학점과 딴따라의 밸런스, 스타트업과 큰 기업의 차이:

이전에 올린 글에는 학점은 별 필요 없다고 적었었는데, 지적해주신 분들 말대로 "반쪽짜리 진실"입니다.

미국 내에서 졸업해 순수히 "직업"을 얻는 경우 학점은 크게 상관 없습니다. 샌프란치스코 SE 일자리의 대부분을 차지하는 수많은 스타트업은 학점을 레주메의 일부로만 볼 뿐 딱히 주의를 기울이진 않습니다. 당장 한 달 안에 만들어야 하는 새 프로덕트에 목을 매는 그들에게는, 신입한테 실무 경험이 있는지가 더 중요하거든요. 그러나 한국인들이 잘 아는 큰 기업들(아마존 등)은 워낙 지원자가 많아서 학점으로 자르는 상황도 발생합니다. 지적해주신대로 성실성을 평가하는 척도로 생각할 수도 있으니까요.

그말인즉, 워낙 학점을 회복하기 힘들 정도로 말아먹었다...하면 미래를 위해 두 가지를 생각해봐야 합니다.
1. 대기업 일단 포기
2. 경험 쌓기에 치중

1번부터 말하자면... 대기업은 경험과 실력만 있으면 나중에 지원할 수 있습니다. 대학 졸업하고 몇 년 지나면 대학 기록은 그냥 레주메 한 줄에 불과합니다. 차라리 작은 회사에 들어가서 많은 경험을 쌓는 것이 좋은데, 그러려면...

...2. 그마저도 실무경험이 필요합니다. 하지만! 개인 프로젝트, 프리랜싱, 리서치, 오픈소스 정도는 학부 때에도 얼마든지 가능합니다. 할 수 있고 해야 합니다. 레주메를 꽉꽉 채울 수 있을 정도로 경험을 쌓으세요. 그게 유일한 활로입니다. 자신이 직접 쓸 프로그램을 만들어도 되고, 장난이나 농담거리로 만든 프로젝트도 되고, 그냥 한번 알고 있는 알고리즘 죄다 구현해보는 것도 되고, 가능성은 무궁무진합니다.

여기서 덧붙이자면, 학점이 전부가 아니라고 하니 학점 말아먹어도 아무거나 만들면 뭐 괜찮겠지...라는 마인드를 가진 분들은 앞으로 몇 년간이 조금 힘들 겁니다. 실무 경험을 쌓는 이유는 "학점 좀 안좋아도 교과서에 나온 건 죄다 만들어봤고 팀 짜서 일해봤다"는 점을 어필하기 위함입니다.

저처럼 3학년 중반 와서 전과하는 등 진로상 큰 일이 있는 경우가 아니라면, 학점 낮은 분들중에는 영 이쪽에 취미를 못붙이거나 한때 학업 외에 더 관심이 있던 분들이 좀 있을 겁니다. 그런데 수업에서 기억나는 게 하나도 없는데 아무거나 프로젝트를 만들어보자고 해서 될까요? 학점이 높은 사람보다 두 배로 공부해서 결과를 내야 합니다.

그런 분들은 밥 먹고 자고 수업 가는 이외엔 책만 읽고 컴퓨터만 두들기는 생활을 해야 학점 높고 잘나가고 똑똑한 애들을 따라잡을 수 있습니다. 읽을 수 있는 해외 서적은 다 읽고, 교과서 Cormen과 Sedgewick 읽고, 유명한 블로그와 새로운 기술은 다 찾아보고, 새로 배운 알고리즘은 반드시 직접 구현해보고...

반대로, 학점이 아주 높다고 해서 방심하면 안 됩니다. 4.0에 가까운데 아직 직업 없는 동기들 저도 꽤 알고있습니다. 레주메 타겟을 잘 정하고, 인턴쉽 잘 하고, 아는 사람 통해서 네트워킹 잘 타고, 무엇보다 학업만 하지 말고 프로그래밍을 즐기세요. 이론만 아는 게 아니라 실전도 안다는 걸 보여주세요. 지금 Github 아이디에 프로젝트 리포 몇 개 갖고 계신가요?

학교 밖에서도 공부하고, 학업 외 시간에는 혼자서 코딩 딴따라를 즐기세요.

p.s.차회예고: 미국 취업 - 레주메의 진실과 네트워킹의 필요성

-------------------
학부생 미국 취직 팁:
1. 영어 기본
2. 학점 (<2)점대로 말아먹은 게 아니면 별 필요 없습니다. 구글 빼고 물어보는 회사 없었어요.
3. 기본 자료구조는 모두 time space complexity와 사용법 사용처 외우기.
4. 알고리즘은 다이내믹 프로그래밍까지, 다익스트라랑 A*같은 거 대충 알아두면 플러스. NP문제 대충 알아볼 정도로.
5. 해쉬 관련 알고리즘과 자료구조 잡학지식은 무조건 자다 일어나도 말할 수 있도록.
6. 읽을 수 있는 건 최대한 많이 읽어두세요. 소프트웨어 하드웨어 잡학은 많이 알아놓을 수록 좋습니다. "누구는 relational 데이터베이스의 본질적 문제 XX 땜에 다른 걸 쓴다더라..." 같은게 은근 도움이 됩니다.
7. 특정 언어나 스택 알아두면 이력서 스크리닝에서 도움이 되지만 그 밖에 큰 차이는 없습니다. 다만 전 5개 이상의 언어를 쓸 줄 안다고 쓴게 도움이 됐습니다, (폴리글랏)
8. 알고리즘용 언어 하나(보통 파이썬)랑 메모리 조작용 언어 하나(C) 기본문법 완벽하게 알아두고, 기본 자료가 어떤 구조로 implement됐는지, 기본적인 언어 이론(파싱, 스코프, 클로저, first class, 람다, statement vs. expression 등등) 알아야 합니다.
9. 하드웨어 시피유, 캐시, 메모리, 가상메모리, IO, 쓰레드와 프로세스, race condition 등 알아두세요. 그 자체로 대답할 일은 없고 "..란 해답이 있긴 한데 이러이러해서 실용성 없다"같은 대답에 필요합니다.
10. 시스템 디자인 알아두세요. 예를 들어 "구글 서치와 페이지랭크를 어떻게 만드냐" 질문은 첫째로 어떤 기능이 있는지, 그러고나선 어떻게 유기적으로 연결이 되어야 하고 각각 속도를 위해서는 어떤 자료구조와 알고리즘 하드웨어가 필요하고 어떤 데이터베이스가 필요한지 얘기한 후, 리소스가 무한한 경우랑 유한한 경우를 나누어서 뭘 바꿔야 하는지 얘기해야 합니다. 연습 많이 해야해요.
11. API 문서만 읽고 한번도 다룬 적 없는 모듈과 언어로 코딩할 준비 하세요.
12. Cracking the Coding Interview가 왕입니다.
13. 스타트업은 AngelList에서.

추가:
14. CareerCup 문제 많이 풀어보세요. 그냥 푸는 게 아니라 문제의 제한사항, 가능한 모든 해결법과 왜 그게 작동하는지, 각각 time space complexity와 굳이 그걸 신경쓸 필요 있는지(예: 작은 데이터엔 O(n2) 삽입정렬이 퀵소트보다 빠릅니다), 코드의 어떤 부분을 주의해야 하는지, 그리고 최후에 기본 테스팅까지 쉬지 않고 (영어로) 중얼중얼 설명할 수 있어야 합니다.
15. 손지민님 추가: LinkedIn 만드세요. 잘 만드는 법은 여기서 말하기엔 길기에 /in/saklee
16. 레주메 잘 쓰기. 링크드인과 비슷합니다.
17. 자료구조는 힙과 해쉬가 깡패입니다. 두개만 있으면 왠만한 질문은 다 대답할 수 있어요. 언제 빠르고 언제 느리고 어떻게 고치는지(힙은 construction, hash는 collision과 avalanche, salting, resizing)그래프 나타내는 방법들에 대해 알아놓으시고...
18. 인턴쉽 하나 없던 제게 제일 도움된 건 혼자, 혹은 비-컴공계 교수님과 같이 만든 수많은 프로젝트가 이력서를 가득 채운 점이었던 것 같습니다. 개인 프로젝트 많이 만드세요. 회사들은 공부만 한 사람들 그렇게 좋아하진 않습니다.

====== Reference ======
